use crate::base::Reflectable;
use crate::base::Side;
use crate::base::square::Square;
use crate::pieces::Piece;

/// API method for retrieving the evaluation for a piece at a given location
/// in the midgame.
pub fn midgame(piece: Piece, location: Square) -> i32 {
    let (table_index, parity) = compute_index_and_parity(piece, location);
    parity * MIDGAME[(piece as usize) % 6][table_index]
}

/// API method for retrieving the evaluation for a piece at a given location
/// in the endgame.
pub fn endgame(piece: Piece, location: Square) -> i32 {
    let (table_index, parity) = compute_index_and_parity(piece, location);
    parity * ENDGAME[(piece as usize) % 6][table_index]
}

/// Computes the table index alongside the parity multiplier according to the
/// piece side.
fn compute_index_and_parity(piece: Piece, location: Square) -> (usize, i32) {
    match piece.side() {
        Side::White => (63 - (location as usize), 1),
        Side::Black => (63 - (location.reflect() as usize), -1),
    }
}

/// Tables lifted from stockfish here: https://github.com/official-stockfish/Stockfish/blob/master/src/psqt.cpp
/// They are (mid, end) values for white side on files A-D
 // Knight
const KNIGHT: [(i32, i32); 32] =  [
    // Rank 1
    (-169,-105), (-96,-74), (-80,-46), (-79,-18),
    ( -79, -70), (-39,-56), (-24,-15), ( -9,  6),
    ( -64, -38), (-20,-33), (  4, -5), ( 19, 27),
    ( -28, -36), (  5,  0), ( 41, 13), ( 47, 34),
    ( -29, -41), ( 13,-20), ( 42,  4), ( 52, 35),
    ( -11, -51), ( 28,-38), ( 63,-17), ( 55, 19),
    ( -67, -64), (-21,-45), (  6,-37), ( 37, 16),
    (-200, -98), (-80,-89), (-53,-53), (-32,-16),
];

const BISHOP: [(i32, i32); 32] = [
    // Rank 1
    (-44,-63), ( -4,-30), (-11,-35), (-28, -8),
    (-18,-38), (  7,-13), ( 14,-14), (  3,  0),
    ( -8,-18), ( 24,  0), ( -3, -7), ( 15, 13),
    (  1,-26), (  8, -3), ( 26,  1), ( 37, 16),
    ( -7,-24), ( 30, -6), ( 23,-10), ( 28, 17),
    (-17,-26), (  4,  2), ( -1,  1), (  8, 16),
    (-21,-34), (-19,-18), ( 10, -7), ( -6,  9),
    (-48,-51), ( -3,-40), (-12,-39), (-25,-20),
];

const ROOK: [(i32, i32); 32] = [
    // Rank 1
    (-24, -2), (-13,-6), (-7, -3), ( 2,-2),
    (-18,-10), (-10,-7), (-5,  1), ( 9, 0),
    (-21, 10), ( -7,-4), ( 3,  2), (-1,-2),
    (-13, -5), ( -5, 2), (-4, -8), (-6, 8),
    (-24, -8), (-12, 5), (-1,  4), ( 6,-9),
    (-24,  3), ( -4,-2), ( 4,-10), (10, 7),
    ( -8,  1), (  6, 2), (10, 17), (12,-8),
    (-22, 12), (-24,-6), (-6, 13), ( 4, 7),
];

const QUEEN: [(i32, i32); 32] = [
    // Rank 1
    ( 3,-69), (-5,-57), (-5,-47), ( 4,-26),
    (-3,-55), ( 5,-31), ( 8,-22), (12, -4),
    (-3,-39), ( 6,-18), (13, -9), ( 7,  3),
    ( 4,-23), ( 5, -3), ( 9, 13), ( 8, 24),
    ( 0,-29), (14, -6), (12,  9), ( 5, 21),
    (-4,-38), (10,-18), ( 6,-12), ( 8,  1),
    (-5,-50), ( 6,-27), (10,-24), ( 8, -8),
    (-2,-75), (-2,-52), ( 1,-43), (-2,-36),
];

const KING: [(i32, i32); 32] = [
    // Rank 1
    (272,  0), (325, 41), (273, 80), (190, 93),
    (277, 57), (305, 98), (241,138), (183,131),
    (198, 86), (253,138), (168,165), (120,173),
    (169,103), (191,152), (136,168), (108,169),
    (145, 98), (176,166), (112,197), ( 69,194),
    (122, 87), (159,164), ( 85,174), ( 36,189),
    ( 87, 40), (120, 99), ( 64,128), ( 25,141),
    ( 64,  5), ( 87, 60), ( 49, 75), (  0, 75),
];

const PAWN: [(i32, i32); 64] = [
    // Pawn (asymmetric distribution) (note A file is on the left here
    // Rank 1
    (  0,  0), (  0,  0), (  0,  0), (  0,  0), (  0,  0), (  0,  0), (  0,  0), (  0,  0),
    (  3,-10), (  3, -6), ( 10, 10), ( 19,  0), ( 16, 14), ( 19,  7), (  7, -5), ( -5,-19),
    ( -9,-10), (-15,-10), ( 11,-10), ( 15,  4), ( 32,  4), ( 22,  3), (  5, -6), (-22, -4),
    ( -8,  6), (-23, -2), (  6, -8), ( 20, -4), ( 40,-13), ( 17,-12), (  4,-10), (-12, -9),
    ( 13,  9), (  0,  4), (-13,  3), (  1,-12), ( 11,-12), ( -2, -6), (-13, 13), (  5,  8),
    ( -5, 28), (-12, 20), ( -7, 21), ( 22, 28), ( -8, 30), ( -5,  7), (-15,  6), (-18, 13),
    ( -7,  0), (  7,-11), ( -3, 12), (-13, 21), (  5, 25), (-16, 19), ( 10,  4), ( -8,  7),
    (  0,  0), (  0,  0), (  0,  0), (  0,  0), (  0,  0), (  0,  0), (  0,  0), (  0,  0),
];

#[cfg(test)]
mod test {
    use crate::base::Reflectable;
    use crate::base::square::Square::*;
    use crate::pieces::Piece;

    use super::{endgame, midgame};

    #[test]
    fn test_reflect() {
        assert_eq!(A8, A1.reflect());
        assert_eq!(H1, H8.reflect());
        assert_eq!(D3, D6.reflect());
        assert_eq!(D5, D4.reflect());
    }

    #[test]
    fn test_midgame() {
        assert_eq!(30, midgame(Piece::WP, C6));
        assert_eq!(-30, midgame(Piece::BP, C3));

        assert_eq!(10, midgame(Piece::WN, D3));
        assert_eq!(-10, midgame(Piece::BN, D6));

        assert_eq!(25, midgame(Piece::WB, D4));
        assert_eq!(-25, midgame(Piece::BB, D5));

        assert_eq!(5, midgame(Piece::WR, D2));
        assert_eq!(-5, midgame(Piece::BR, D7));

        assert_eq!(5, midgame(Piece::WQ, B3));
        assert_eq!(-5, midgame(Piece::BQ, B6));

        assert_eq!(50, midgame(Piece::WK, B1));
        assert_eq!(-50, midgame(Piece::BK, B8));
    }

    #[test]
    fn test_endgame() {
        assert_eq!(80, endgame(Piece::WP, C6));
        assert_eq!(-80, endgame(Piece::BP, C3));

        assert_eq!(-40, endgame(Piece::WN, E1));
        assert_eq!(40, endgame(Piece::BN, E8));

        assert_eq!(25, endgame(Piece::WB, D4));
        assert_eq!(-25, endgame(Piece::BB, D5));

        assert_eq!(10, endgame(Piece::WR, D3));
        assert_eq!(-10, endgame(Piece::BR, D6));

        assert_eq!(-30, endgame(Piece::WQ, A4));
        assert_eq!(30, endgame(Piece::BQ, A5));

        assert_eq!(10, endgame(Piece::WK, D7));
        assert_eq!(-10, endgame(Piece::BK, D2));
    }
}

const MIDGAME: [[i32; 64]; 6] = [
    PAWN_MIDGAME,
    KNIGHT_MIDGAME,
    BISHOP_MIDGAME,
    ROOK_MIDGAME,
    QUEEN_MIDGAME,
    KING_MIDGAME,
];

const ENDGAME: [[i32; 64]; 6] = [
    PAWN_ENDGAME,
    KNIGHT_ENDGAME,
    BISHOP_ENDGAME,
    ROOK_ENDGAME,
    QUEEN_ENDGAME,
    KING_ENDGAME,
];

const PAWN_MIDGAME: [i32; 64] = [
    0, 0, 0, 0, 0, 0, 0, 0, 60, 60, 60, 60, 60, 60, 60, 60, 5, 25, 30, 50, 50, 30, 25, 5, 5, 20,
    30, 40, 40, 30, 20, 5, 5, -5, -5, 40, 40, -5, -5, 5, 10, -5, 0, -10, -10, 0, -5, 10, 0, 0, 0,
    -20, -20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

const PAWN_ENDGAME: [i32; 64] = [
    0, 0, 0, 0, 0, 0, 0, 0, 100, 100, 100, 100, 100, 100, 100, 100, 80, 80, 80, 80, 80, 80, 80, 80,
    60, 60, 60, 60, 60, 60, 60, 60, 20, 20, 20, 20, 20, 20, 20, 20, -10, -10, -10, -10, -10, -10,
    -10, -10, -50, -50, -50, -50, -50, -50, -50, -50, 0, 0, 0, 0, 0, 0, 0, 0,
];

const KNIGHT_MIDGAME: [i32; 64] = [
    -40, -40, -40, -40, -40, -40, -40, -40, -40, 10, 15, 15, 15, 15, 10, -40, -40, 10, 25, 25, 25,
    25, 10, -40, -40, 10, 35, 35, 35, 35, 10, -40, -40, 10, 20, 25, 25, 20, 10, -40, -40, 10, 10,
    10, 10, 10, 10, -40, -40, -30, 0, 0, 0, 0, -30, -40, -40, -40, -40, -40, -40, -40, -40, -40,
];

const KNIGHT_ENDGAME: [i32; 64] = [
    -40, -40, -40, -40, -40, -40, -40, -40, -40, 10, 15, 15, 15, 15, 10, -40, -40, 20, 35, 35, 35,
    35, 20, -40, -40, 15, 25, 25, 25, 25, 15, -40, -40, 15, 20, 25, 25, 20, 15, -40, -40, 10, 10,
    10, 10, 10, 10, -40, -40, -30, 0, 0, 0, 0, -30, -40, -40, -40, -40, -40, -40, -40, -40, -40,
];

const BISHOP_MIDGAME: [i32; 64] = [
    -30, -20, -10, -10, -10, -10, -20, -30, -20, 10, 15, 15, 15, 15, 10, -20, -10, 15, 20, 25, 25,
    20, 15, -10, -10, 15, 30, 35, 35, 30, 15, -10, -10, 15, 20, 25, 25, 20, 15, -10, -20, 10, 10,
    10, 10, 10, 10, -20, -30, 10, 0, 0, 0, 0, 10, -30, -40, -40, -40, -40, -40, -40, -40, -40,
];

const BISHOP_ENDGAME: [i32; 64] = [
    -30, -20, -10, -10, -10, -10, -20, -30, -20, 10, 15, 15, 15, 15, 10, -20, -10, 20, 35, 35, 35,
    35, 20, -10, -10, 15, 20, 25, 25, 20, 15, -10, -10, 15, 20, 25, 25, 20, 15, -10, -20, 10, 10,
    10, 10, 10, 10, -20, -30, 10, 0, 0, 0, 0, 10, -30, -40, -40, -40, -40, -40, -40, -40, -40,
];

const ROOK_MIDGAME: [i32; 64] = [
    5, 7, 10, 10, 10, 10, 7, 5, 7, 15, 25, 30, 30, 25, 15, 7, -30, -30, -30, -30, -30, -30, -30,
    -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30, -30,
    -30, -30, -30, -30, -30, -30, -10, -10, 0, 5, 5, 0, -10, -10, 10, 10, 20, 30, 30, 20, 10, 10,
];

const ROOK_ENDGAME: [i32; 64] = [
    5, 7, 10, 10, 10, 10, 7, 5, 25, 35, 40, 40, 40, 40, 35, 25, -5, 5, 20, 20, 20, 20, 5, -5, -5,
    -5, 10, 25, 25, 10, -5, -5, -5, -5, 10, 25, 25, 10, -5, -5, -5, -5, 10, 10, 10, 10, -5, -5,
    -10, -10, 0, 5, 5, 0, -10, -10, 5, 5, 10, 15, 15, 10, 5, 5,
];

const QUEEN_MIDGAME: [i32; 64] = [
    5, 7, 10, 10, 10, 10, 7, 5, 7, 7, 10, 15, 15, 10, 7, 7, -10, 5, 20, 35, 35, 20, 5, -10, -10, 5,
    20, 25, 25, 20, 5, -10, -30, 5, 20, 25, 25, 20, 5, -30, -30, 5, 25, 35, 35, 25, 5, -30, -10,
    -10, 10, 10, 10, 10, -10, -10, -40, -40, -40, -5, -5, -40, -40, -40,
];

const QUEEN_ENDGAME: [i32; 64] = [
    5, 7, 10, 10, 10, 10, 7, 5, 7, 20, 25, 35, 35, 25, 20, 7, -20, 10, 20, 35, 35, 20, 10, -20,
    -30, 5, 20, 25, 25, 20, 5, -30, -30, 5, 20, 25, 25, 20, 5, -30, -30, 5, 10, 15, 15, 10, 5, -30,
    -10, -10, 5, 10, 10, 5, -10, -10, -40, -40, -40, -5, -5, -40, -40, -40,
];

const KING_MIDGAME: [i32; 64] = [
    -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40,
    -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -40,
    -40, -40, -40, -40, -40, -40, -40, -40, -40, -40, -35, -35, -35, -40, -40, -35, -35, -35, 10,
    50, 30, -40, -40, 10, 50, 10,
];

const KING_ENDGAME: [i32; 64] = [
    -40, -40, -40, -40, -40, -40, -40, -40, -20, 2, 5, 10, 10, 5, 2, -20, -20, 5, 10, 20, 20, 10,
    5, -20, -20, 10, 20, 25, 25, 20, 10, -20, -20, 10, 20, 25, 25, 20, 10, -20, -20, 5, 10, 20, 20,
    10, 5, -20, -40, 2, 5, 10, 10, 5, 2, -40, -10, 0, 0, -20, -20, 0, 0, -10,
];
